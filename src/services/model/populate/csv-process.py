# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16ACvkEHUqDn0BPCzB1o5BeL7YA9-w_p7
"""

import pandas as pd
import numpy as np

import matplotlib.pyplot as plt
import plotly.graph_objs as go
import plotly.express as px
import seaborn as sns

# import csv

#df_c_levels = pd.read_csv('/content/ITL-ESM6-2024-dataset-recomendação - ds-c-levels.csv')
#df_projects = pd.read_csv('/content/ITL-ESM6-2024-dataset-recomendação - ds-projetos.csv')
df_ratings = pd.read_csv('/content/ITL-ESM6-2024-dataset-recomendação - ds-avaliação.csv')

"""# Df users"""

df_c_levels.rename(columns={
    'id': 'id',
    'proponente': 'proponent',
    'nome da empresa': 'company name',
    'indústria de atuação': 'industry',
    'cargo': 'position'
}, inplace=True)

df_c_levels.head()

print(df_c_levels)

# Função para gerar o email a partir do nome do proponente
def gerar_email(nome):
    usuario = nome.lower().replace(' ', '.').replace('-', '.')
    return f"{usuario}@example.com"

# Adicionar a coluna email ao DataFrame
df_c_levels['email'] = df_c_levels['proponent'].apply(gerar_email)

# Salvar o DataFrame modificado em um novo CSV
#df_c_levels.to_csv('seu_arquivo_modificado.csv', index=False)

# Mostrar as primeiras linhas do DataFrame para verificar
df_c_levels.head()

df_c_levels['password'] = 'example'

df_c_levels['position'] = df_c_levels['position'].replace('Embaixador', 'Ambassador')

print(df_c_levels['position'].unique())

# Categories, modify the original csv to create this column in csv
categories = [
    "Reducing Environmental Impact",
    "Conservation of the Planet",
    "Integrity and Ethical Practices",
    "Productivity and Competitiveness",
    "Diversity & Inclusion",
    "Well-being, Health, and Happiness"
]

df_c_levels['interest'] = np.random.choice(categories, size=len(df_c_levels))

print(df_c_levels.head())

print(df_c_levels.head)

import pandas as pd
import json
import random

# Funções para gerar dados falsos
def gerar_linkedin(proponent):
    nome_normalizado = proponent.lower().replace(' ', '-').replace('ç', 'c').replace('ã', 'a').replace('é', 'e').replace('á', 'a').replace('ê', 'e')
    return f"https://linkedin.com/in/{nome_normalizado}"

def gerar_interesse():
    interesses = ["saude e bem estar", "tecnologia", "inovação", "sustentabilidade", "educação"]
    return random.choice(interesses)

# Adicionar as colunas 'linkedin_link' e 'interest'
df_c_levels['linkedin_link'] = df_c_levels['proponent'].apply(gerar_linkedin)
df_c_levels['interest'] = df_c_levels['interest'].apply(lambda x: gerar_interesse())

# Função para criar o payload JSON
def criar_payload(linha):
    payload = {
        "name": linha['proponent'],
        "email": linha['email'],
        "password": linha['password'],
        "company_name": linha['company name'],
        "office": linha['position'],
        "linkedin_link": linha['linkedin_link'],
        "interest": linha['interest']
    }
    return json.dumps(payload)

df_c_levels.head()

df_c_levels.to_csv('users.csv', index=False)

payloads = df_c_levels.apply(criar_payload, axis=1)
for payload in payloads:
    print(f"curl -X POST -H \"Content-Type: application/json\" -d '{payload}' http://localhost:8082/api/v1/register")

"""# DF projects"""

df_projects.rename(columns={
    'id': 'id',
    'proponente_id': 'proponent_id',
    'projeto': 'project',
    'setor': 'sector',
    'macrosetor': 'macrosector',
    'impacto-esperado': 'expected_impact',
    'status': 'status',
    'alcance geográfico': 'geographic_scope',
    'público-alvo': 'target_audience'
}, inplace=True)

df_projects.head()

df_projects.drop(columns=['sector', 'expected_impact', 'status', 'geographic_scope', 'target_audience'], inplace=True)

df_projects.head()

print(df_projects)

df_projects.to_csv('projects.csv', index=False)

df_projects.head()

"""DF Ratings"""

print(df_ratings)

df_ratings.rename(columns={
    'id_proponente': 'user_id',
    'id_projeto': 'project_id',
    'avaliação': 'rating'
}, inplace=True)

df_ratings.head()



# Mapping the rating values to the range [-1, 1]
mapping = {1: -1, 2: -1, 3: -1, 4: 1, 5: 1}
df_ratings['rating'] = df_ratings['rating'].map(mapping)

# Verifying the unique values after normalization
unique_normalized_ratings = df_ratings['rating'].unique()
print(unique_normalized_ratings)

print(df_ratings)

df_ratings.to_csv('ratings.csv', index=False)